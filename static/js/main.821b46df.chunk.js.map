{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","components/Form/Form.module.css","components/Contacts/Contacts.module.css","components/Contacts/Contacts.js","components/Form/ContactForm.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","Contacts","contacts","onDeleteContact","className","styles","contacts__list","map","id","name","number","item","info","button","type","onClick","shortid","require","ContactForm","state","handleChange","e","currentTarget","value","setState","handleCreateContactsObject","generate","handleSubmit","preventDefault","handleCleanInput","props","onCheck","alert","newContact","onSubmit","this","form","label","input","onChange","pattern","title","required","btn","Component","defaultProps","Filter","onChangeFilter","App","filter","handleChangeFilter","handleExistingContact","find","contact","toLowerCase","handleAddContacts","prevState","filterByInputValue","normalizedFilter","includes","handleDeleteContact","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","console","log","filteredNames","wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.821b46df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2Y0IZ\",\"input\":\"Filter_input__3Gsoq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Bjia\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2Ey-6\",\"label\":\"Form_label__23Q5T\",\"input\":\"Form_input__2KWE8\",\"btn\":\"Form_btn__2wi7l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"Contacts_contacts__list__2vHpO\",\"item\":\"Contacts_item__161Ca\",\"info\":\"Contacts_info___8upU\",\"button\":\"Contacts_button__3cmnf\"};","import PropTypes from 'prop-types';\r\nimport styles from './Contacts.module.css';\r\n\r\nconst Contacts = ({ contacts, onDeleteContact }) => (\r\n    <ul className={styles.contacts__list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} >\r\n                <div className={styles.item}>\r\n                    <p className={styles.info}>{name}: {number}</p>\r\n                    <button className={styles.button} type=\"button\" onClick={() => onDeleteContact(id)}>Delete</button>\r\n                </div>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nContacts.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n}\r\nexport default Contacts;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Form.module.css';\r\nconst shortid = require('shortid');\r\n\r\nclass ContactForm extends Component {\r\n  static defaultProps = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    onCheck: PropTypes.func.isRequired,\r\n  };\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  handleChange = e => {\r\n    const { value, name } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleCreateContactsObject = (name, number) => {\r\n    return {\r\n      name,\r\n      number,\r\n      id: shortid.generate(),\r\n    };\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.handleCleanInput();\r\n    const { name, number } = this.state;\r\n    const checkingContact = this.props.onCheck(name);\r\n    if (checkingContact) {\r\n      return alert(`${name} is already in contacts`);\r\n    } else {\r\n      const newContact = this.handleCreateContactsObject(name, number);\r\n      this.props.onSubmit(newContact);\r\n    }\r\n  };\r\n  handleCleanInput = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            value={name}\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            onChange={this.handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <>\r\n        <label className={styles.label}>Find contacts by name\r\n            <input className={styles.input} name=\"filter\" type=\"text\" value={value} onChange={onChangeFilter} />\r\n        </label>\r\n    </>\r\n);\r\n\r\nFilter.defaultProps = {\r\n    value: '',\r\n}\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Filter;","import { Component } from 'react';\nimport 'modern-normalize/modern-normalize.css';\nimport Contacts from './components/Contacts/Contacts';\nimport ContactForm from './components/Form/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n  handleChangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  handleExistingContact = name => {\n    const { contacts } = this.state;\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n  handleAddContacts = contact => {\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, contact],\n    }));\n  };\n  filterByInputValue = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  handleDeleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n  render() {\n    console.log('App render');\n    const { filter } = this.state;\n    const filteredNames = this.filterByInputValue();\n    return (\n      <div className={styles.wrapper}>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onSubmit={this.handleAddContacts}\n          onCheck={this.handleExistingContact}\n        />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChangeFilter={this.handleChangeFilter} />\n        <Contacts\n          contacts={filteredNames}\n          onDeleteContact={this.handleDeleteContact}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}